/**
 * MIT License
 *
 * Copyright (C) 2023 Huawei Device Co., Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as change may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include "Props.h"
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook {
namespace react {

RNCVideoProps::RNCVideoProps(const PropsParserContext &context, const RNCVideoProps &sourceProps,
                             const RawProps &rawProps)
    : ViewProps(context, sourceProps, rawProps),

      src(convertRawProp(context, rawProps, "src", sourceProps.src, {})),
      drm(convertRawProp(context, rawProps, "drm", sourceProps.drm, {})),
      allowsExternalPlayback(
          convertRawProp(context, rawProps, "allowsExternalPlayback", sourceProps.allowsExternalPlayback, {false})),
      automaticallyWaitsToMinimizeStalling(convertRawProp(context, rawProps, "automaticallyWaitsToMinimizeStalling",
                                                          sourceProps.automaticallyWaitsToMinimizeStalling, {false})),
      bufferConfig(convertRawProp(context, rawProps, "bufferConfig", sourceProps.bufferConfig, {})),
      controls(convertRawProp(context, rawProps, "controls", sourceProps.controls, {false})),
      currentPlaybackTime(
          convertRawProp(context, rawProps, "currentPlaybackTime", sourceProps.currentPlaybackTime, {0.0})),
      disableFocus(convertRawProp(context, rawProps, "disableFocus", sourceProps.disableFocus, {false})),
      filter(convertRawProp(context, rawProps, "filter", sourceProps.filter, {RNCVideoFilter::NONE})),
      filterEnabled(convertRawProp(context, rawProps, "filterEnabled", sourceProps.filterEnabled, {false})),
      fullscreen(convertRawProp(context, rawProps, "fullscreen", sourceProps.fullscreen, {false})),
      fullscreenAutorotate(
          convertRawProp(context, rawProps, "fullscreenAutorotate", sourceProps.fullscreenAutorotate, {false})),
      fullscreenOrientation(convertRawProp(context, rawProps, "fullscreenOrientation",
                                           sourceProps.fullscreenOrientation, {RNCVideoFullscreenOrientation::ALL})),
      hideShutterView(convertRawProp(context, rawProps, "hideShutterView", sourceProps.hideShutterView, {false})),
      ignoreSilentSwitch(convertRawProp(context, rawProps, "ignoreSilentSwitch", sourceProps.ignoreSilentSwitch,
                                        {RNCVideoIgnoreSilentSwitch::INHERIT})),
      maxBitRate(convertRawProp(context, rawProps, "maxBitRate", sourceProps.maxBitRate, {0.0})),
      minLoadRetryCount(convertRawProp(context, rawProps, "minLoadRetryCount", sourceProps.minLoadRetryCount, {0})),
      mixWithOthers(convertRawProp(context, rawProps, "mixWithOthers", sourceProps.mixWithOthers,
                                   {RNCVideoMixWithOthers::INHERIT})),
      muted(convertRawProp(context, rawProps, "muted", sourceProps.muted, {false})),
      paused(convertRawProp(context, rawProps, "paused", sourceProps.paused, {false})),
      pictureInPicture(convertRawProp(context, rawProps, "pictureInPicture", sourceProps.pictureInPicture, {false})),
      playInBackground(convertRawProp(context, rawProps, "playInBackground", sourceProps.playInBackground, {false})),
      playWhenInactive(convertRawProp(context, rawProps, "playWhenInactive", sourceProps.playWhenInactive, {false})),
      preferredForwardBufferDuration(convertRawProp(context, rawProps, "preferredForwardBufferDuration",
                                                    sourceProps.preferredForwardBufferDuration, {0.0})),
      preventsDisplaySleepDuringVideoPlayback(
          convertRawProp(context, rawProps, "preventsDisplaySleepDuringVideoPlayback",
                         sourceProps.preventsDisplaySleepDuringVideoPlayback, {true})),
      progressUpdateInterval(
          convertRawProp(context, rawProps, "progressUpdateInterval", sourceProps.progressUpdateInterval, {0.0})),
      rate(convertRawProp(context, rawProps, "rate", sourceProps.rate, {0.0})),
      repeat(convertRawProp(context, rawProps, "repeat", sourceProps.repeat, {false})),
      reportBandwidth(convertRawProp(context, rawProps, "reportBandwidth", sourceProps.reportBandwidth, {false})),
      resizeMode(convertRawProp(context, rawProps, "resizeMode", sourceProps.resizeMode, {RNCVideoResizeMode::NONE})),
      //      resizeMode(convertRawProp(context, rawProps, "resizeMode", sourceProps.resizeMode, "none")),
      selectedAudioTrack(convertRawProp(context, rawProps, "selectedAudioTrack", sourceProps.selectedAudioTrack, {})),
      selectedTextTrack(convertRawProp(context, rawProps, "selectedTextTrack", sourceProps.selectedTextTrack, {})),
      selectedVideoTrack(convertRawProp(context, rawProps, "selectedVideoTrack", sourceProps.selectedVideoTrack, {})),
      stereoPan(convertRawProp(context, rawProps, "stereoPan", sourceProps.stereoPan, {0.0})),
      textTracks(convertRawProp(context, rawProps, "textTracks", sourceProps.textTracks, {})),
      trackId(convertRawProp(context, rawProps, "trackId", sourceProps.trackId, {})),
      useTextureView(convertRawProp(context, rawProps, "useTextureView", sourceProps.useTextureView, {false})),
      volume(convertRawProp(context, rawProps, "volume", sourceProps.volume, {1.0})),
      restoreUserInterfaceForPIPStopCompletionHandler(
          convertRawProp(context, rawProps, "restoreUserInterfaceForPIPStopCompletionHandler",
                         sourceProps.restoreUserInterfaceForPIPStopCompletionHandler, {false}))
{
}

} // namespace react
} // namespace facebook